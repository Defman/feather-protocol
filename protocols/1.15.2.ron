(
    version: 578,
    packets: {
        (Server, Handshaking, 0x00): (
            name: "handshake",
            custom_type: Struct({
                "protocol_version": VarInt,
                "server_address": String(255),
                "server_port": U16,
                "next_state": CustomType("state", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (1, "status"): Unit,
                        (2, "login"): Unit,
                    }
                ))
            })
        ),
        (Client, Status, 0x00): (
            name: "response",
            custom_type: Struct({
                "json_lenght": VarInt,
				"json_response": String(32767),
            })
        ),
		(Client, Status, 0x01): (
            name: "pong",
            custom_type: Struct({
                "payload": I64,
            })
        ),
		(Server, Status, 0x00): (
            name: "request",
            custom_type: Struct({})
        ),
		(Server, Status, 0x01): (
            name: "ping",
            custom_type: Struct({
				"payload": I64
            })
        ),
		(Client, Login, 0x00): (
           name: "disconnect",
           custom_type: Struct({
               "reason": Shared("chat"),
           })
        ),		
		(Client, Login, 0x01): (
            name: "encryption_request",
            custom_type: Struct({
                "server_id": String(20),
				"public_key": Array(
                    length: Prefixed(VarInt),
                    type: U8,
                ),
				"verify_token": Array(
                    length: Prefixed(VarInt),
                    type: U8,
                ),
            })
        ),
		(Client, Login, 0x02): (
            name: "login_success",
            custom_type: Struct({
                "uuid": String(36),
				"username": String(16),
            })
        ),
		(Client, Login, 0x03): (
            name: "set_compression",
            custom_type: Struct({
                "threshold": VarInt,
            })
        ),
		(Client, Login, 0x04): (
            name: "login_plugin_request",
            custom_type: Struct({
                "message_id": VarInt,
				"channel": Shared("identifier"),
				"data": Array(
                    type: U8,
                    length: RemainingLength,
                ),
            })
        ),
		(Server, Login, 0x00): (
            name: "login_start",
            custom_type: Struct({
                "name": String(16),
            })
        ),
        (Server, Login, 0x01): (
            name: "encryption_response",
            custom_type: Struct({
                "shared_secret": Array(
                    length: Prefixed(VarInt),
                    type: U8,
                ),
                "verify_token": Array(
                    length: Prefixed(VarInt),
                    type: U8,
                ),
            })
        ),
        (Server, Login, 0x02): (
            name: "login_plugin_response",
            custom_type: Struct({
                "message_id": VarInt,
                "successful": Boolean,
                "data": Option(Array(
                    type: U8,
                    length: RemainingLength,
                ),),
            })
        ),
        (Client, Play, 0x00): (
            name: "spawn_entity",
            custom_type: Struct({
                "entity_id": Shared("entity_id"),
                "object_uuid": Uuid,
                "type": VarInt,
                "x": F64,
                "y": F64,
                "z": F64,
                "pitch": U8,
                "yaw": U8,
                "data": I32,
                "velocity_x": I16,
                "velocity_y": I16,
                "velocity_z": I16,
            })
        ),
        (Client, Play, 0x01): (
            name: "spawn_experience_orb",
            custom_type: Struct({
                "entity_id": Shared("entity_id"),
                "x": F64,
                "y": F64,
                "z": F64,
                "count": I16,
            })
        ),
        (Client, Play, 0x02): (
            name: "spawn_weather_entity",
            custom_type: Struct({
                "entity_id": Shared("entity_id"),
                "type": CustomType("type", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (1, "thunderbolt"): Unit,
                    },
                )),
                "x": F64,
                "y": F64,
                "z": F64
            })
        ),
        (Client, Play, 0x03): (
            name: "spawn_living_entity",
            custom_type: Struct({
                "entity_id": Shared("entity_id"),
                "entity_uuid": Uuid,
                "type": VarInt,
                "x": F64,
                "y": F64,
                "z": F64,
                "yaw": U16,
                "pitch": U16,
                "head_pitch": U16,
                "velocity_x": I16,
                "velocity_y": I16,
                "velocity_z": I16
            })
        ),
        (Client, Play, 0x04): (
            name: "spawn_painting",
            custom_type: Struct({
                "entity_id": Shared("entity_id"),
                "entity_uuid": Uuid,
                "motive": CustomType("motive", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "kebab"): Unit,
                        (1, "aztec"): Unit,
                        (2, "alban"): Unit,
                        (3, "aztec2"): Unit,
                        (4, "bomb"): Unit,
                        (5, "plant"): Unit,
                        (6, "wasteland"): Unit,
                        (7, "pool"): Unit,
                        (8, "courbet"): Unit,
                        (9, "sea"): Unit,
                        (10, "sunset"): Unit,
                        (11, "creebet"): Unit,
                        (12, "wanderer"): Unit,
                        (13, "graham"): Unit,
                        (14, "match"): Unit,
                        (15, "bust"): Unit,
                        (16, "stage"): Unit,
                        (17, "void"): Unit,
                        (18, "skull_and_roses"): Unit,
                        (19, "wither"): Unit,
                        (20, "fighters"): Unit,
                        (21, "pointer"): Unit,
                        (22, "pigscene"): Unit,
                        (23, "burning_skull"): Unit,
                        (24, "skeleton"): Unit,
                        (25, "donkey_kong"): Unit,
                    }
                )),
                "location": Shared("position"),
                "direction": CustomType("direction", Enum(
                    variant: Prefixed(U8),
                    variants: {
                        (0, "south"): Unit,
                        (1, "west"): Unit,
                        (2, "north"): Unit,
                        (3, "east"): Unit,
                    },
                )),
            })
        ),
        (Client, Play, 0x05): (
            name: "spawn_player",
            custom_type: Struct({
                "entity_id": Shared("entity_id"),
                "player_uuid": Uuid,
                "x": F64,
                "y": F64,
                "z": F64,
                "yaw": U8,
                "pitch": U8
            })
        ),
        (Client, Play, 0x06): (
            name: "entity_animation",
            custom_type: Struct({
                "entity_id": Shared("entity_id"),
                "animation": CustomType("animation", Enum(
                    variant: Prefixed(U8),
                    variants: {
                        (0, "swing_main_arm"): Unit,
                        (1, "take_damage"): Unit,
                        (2, "leave_bed"): Unit,
                        (3, "swing_offhand"): Unit,
                        (4, "critical_effect"): Unit,
                        (5, "magic_critical_effect"): Unit,
                    }
                ))
            })
        ),
        (Client, Play, 0x07): (
            name: "statistics",
            custom_type: Struct({
                "statistics": Array(
                    length: Prefixed(VarInt),
                    type: CustomType("statistic", Struct({
                        "category_id": VarInt,
                        "statistic_id": VarInt,
                    }))
                ),
                "value": VarInt,
            })
        ),
        (Client, Play, 0x08): (
            name: "acknowledge_player_digging",
            custom_type: Struct({
                "location": Shared("position"),
                "block": VarInt,
                "status": CustomType("status", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "started_digging"): Unit,
                        (1, "cancelled_digging"): Unit,
                        (2, "finished_digging"): Unit,
                    }
                )),
                "successful": Boolean
            })
        ),
        (Client, Play, 0x09): (
            name: "block_break_animation",
            custom_type: Struct({
                "entity_id": Shared("entity_id"),
                "location": Shared("position"),
                "destroy_stage": I8
            })
        ),
        (Client, Play, 0x0A): (
            name: "block_entity_data",
            custom_type: Struct({
                "location": Shared("position"),
                "action": U8, // TODO
                "nbt_data": Shared("nbt_tag")
            })
        ),
        (Client, Play, 0x0B): (
            name: "block_action",
            custom_type: Struct({
                "location": Shared("position"),
                "action_id": U8,
                "action_param": U8,
                "block_type": VarInt
            })
        ),
        (Client, Play, 0x0C): (
            name: "block_change",
            custom_type: Struct({
                "location": Shared("position"),
                "block_id": VarInt,
            })
        ),
        (Client, Play, 0x0D): (
            name: "boss_bar",
            custom_type: Struct({
                "uuid": Uuid,
                "action": CustomType("action", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "add"): Struct({
                            "title": Shared("chat"),
                            "health": F32,
                            "color": Shared("color"),
                            "division": Shared("division"),
                            "flags": CustomType("flags", BitFlags(
                                type: U8,
                                flags: {
                                    0x01: "darken_sky",
                                    0x02: "dragon_bar",
                                    0x04: "create_fog",
                                }
                            )),
                        }),
                        (1, "remove"): Unit,
                        (2, "update_health"): Struct({
                            "health": F32,
                        }),
                        (3, "update_title"): Struct({
                            "title": Shared("chat"),
                        }),
                        (4, "update_style"): Struct({
                            "color": Shared("color"),
                            "dividers": Shared("division"),
                        }),
                        (5, "update_flags"): Struct({
                            "flags": U8, // TODO
                        }),
                    }
                )),
            })
        ),
        (Client, Play, 0x0E): (
            name: "server_difficulty",
            custom_type: Struct({
                "difficulty": Shared("difficulty"), //TODO: 0: peaceful, 1: easy, 2: normal, 3: hard
                "difficulty_locked": Boolean,
            })
        ),
        (Client, Play, 0x0F): (
            name: "chat_message",
            custom_type: Struct({
                "json_data": Shared("chat"),
                "position": CustomType("position", Enum(
                    variant: Prefixed(I8),
                    variants: {
                        (0, "chat"): Unit,
                        (1, "system_message"): Unit,
                        (2, "game_info"): Unit,
                    }
                )),
            })
        ),
        (Client, Play, 0x10): (
            name: "multi_block_change",
            custom_type: Struct({
                "chunk_x": I32,
                "chunk_z": I32,
                "record": Array(
                    length: Prefixed(VarInt),
                    type: CustomType("record", Struct({
                        "horizontal_position": U8,
                        "y_coordinate": U8,
                        "block_id": VarInt,
                    }))
                )
            })
        ),

        (Client, Play, 0x11): (
            name: "tab_complete",
            custom_type: Struct({
                "id": VarInt,
                "start": VarInt,
                "lentgh": VarInt,
                "count": VarInt,
                "matches": Array(
                    length: Prefixed(VarInt),
                    type: CustomType("matches", Struct({
                        "match": String(32767),
                        "tooltip": Option(Shared("chat")),
                    }))
                )
            })
        ),
        (Client, Play, 0x12): (
            name: "declare_command",
            custom_type: Struct({
                "count": VarInt,
                "nodes": VarInt,
                "length": Array(
                    length: Prefixed(VarInt),
                    type: Shared("node")
                ),
                "root_index": VarInt
            })
        ),
        (Client, Play, 0x13): (
            name: "window_confirmation",
            custom_type: Struct({
                "window_id": I8,
                "action_number": U16,
                "accepted": Boolean
            })
        ),
        (Client, Play, 0x14): (
            name: "close_window",
            custom_type: Struct({
                "window_id": U8,
            })
        ),
        (Client, Play, 0x15): (
            name: "window_items",
            custom_type: Struct({
                "window_id": U8,
                "count": I16, // Short
                "slot_data": Array(
                    length: Prefixed(VarInt),
                    type: Shared("slot")
                ),
            })
        ),
        (Client, Play, 0x16): (
            name: "window_property",
            custom_type: Struct({
                "window_id": U8,
                "property": I16, // Short
                "value": I16 // Short
            })
        ),
        (Client, Play, 0x17): (
            name: "set_slot",
            custom_type: Struct({
                "window_id": U8,
                "slot": I16, // Short
                "slot_data": Shared("slot")
            })
        ),
        (Client, Play, 0x18): (
            name: "set_cooldown",
            custom_type: Struct({
                "item_id": VarInt,
                "cooldown_ticks": VarInt
            })
        ),
        (Client, Play, 0x19): (
            name: "plugin_message",
            custom_type: Struct({
                "channel": Shared("identifier"),
                "data": Array(
                    length: Prefixed(VarInt),
                    type: I8
                ) // Make that an enum
            })
        ),
        (Client, Play, 0x1A): (
            name: "named_sound_effect",
            custom_type: Struct({
                "sound_name": Shared("identifier"),
                "sound_category": CustomType("sound_category", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "master"): Unit,
                        (1, "music"): Unit,
                        (2, "record"): Unit,
                        (3, "weather"): Unit,
                        (4, "block"): Unit,
                        (5, "hostile"): Unit,
                        (6, "neutral"): Unit,
                        (7, "player"): Unit,
                        (8, "ambient"): Unit,
                        (9, "voice"): Unit,
                    }
                )),
                "effect_position_x": I32,
                "effect_position_y": I32,
                "effect_position_z": I32,
                "volume": F32,
                "pitch": F32,
            })
        ),
        (Client, Play, 0x1B): (
            name: "disconnect",
            custom_type: Struct({
                "reason": Shared("chat"),
            })
        ),
        (Client, Play, 0x1C): (
            name: "entity_status",
            custom_type: Struct({
                "entity_id": I32,
                "entity_status": U8,
            })
        ),
        (Client, Play, 0x1D): (
            name: "explosion",
            custom_type: Struct({
                "x": F32,
                "y": F32,
                "z": F32,
                "strength": F32,
                "record_count": I32,
                "records": Array(
                    length: Prefixed(VarInt),
                    type: CustomType("relative_location",Struct({
                        "x": I8,
                        "y": I8,
                        "z": I8,
                    }))
                ),
                "player_motion_x": F32,
                "player_motion_y": F32,
                "player_motion_z": F32
            })
        ),
        (Client, Play, 0x1E): (
            name: "unload_chunk",
            custom_type: Struct({
                "chunk_x": I32,
                "chunk_y": I32
            })
        ),
        (Client, Play, 0x1F): (
            name: "change_game_state",
            custom_type: Struct({
                "reason": CustomType("sound_category", Enum(
                    variant: Prefixed(U8),
                    variants: {
                        (0, "invalid_bed"): Unit,
                        (1, "end_raining"): Unit,
                        (2, "begin_raining"): Unit,
                        (3, "change_gamemode"): Unit,
                        (4, "exit_end"): Unit,
                        (5, "demo_message"): Unit,
                        (6, "arrow_hitting_player"): Unit,
                        (7, "fade_value"): Unit,
                        (8, "fade_time"): Unit,
                        (9, "play_pufferfish_sting_sound"): Unit,
                        (10, "play_elder_guardian_mob_apperance"): Unit,
                        (11, "enable_respawn_screen"): Unit,
                    }
                )),
                "value": F32
            })
        ),
        (Client, Play, 0x20): (
            name: "open_horse_window",
            custom_type: Struct({
                "window_id": I8,
                "number_of_slots": VarInt,
                "entity_id": I32
            })
        ),
        (Client, Play, 0x21): (
            name: "keep_alive",
            custom_type: Struct({
                "keep_alive_id": I64,
            })
        ),
        (Server, Play, 0x00): (
            name: "teleport_confirm",
            custom_type: Struct({
                "teleport_id": VarInt
            })
        ),
        (Server, Play, 0x01): (
            name: "query_block_nbt",
            custom_type: Struct({
                "transaction_id": VarInt,
                "location": Shared("position"),
            })
        ),
        (Server, Play, 0x02): (
            name: "set_difficulty",
            custom_type: Struct({
                "new_difficulty": CustomType("difficulty", Enum(
                    variant: Prefixed(I8),
                    variants: {
                        (0, "peaceful"): Unit,
                        (1, "easy"): Unit,
                        (2, "normal"): Unit,
                        (3, "hard"): Unit,
                    }
                ))
            })
        ),
        (Server, Play, 0x03): (
            name: "chat_message",
            custom_type: Struct({
                "message": String(256),
            })
        ),
        (Server, Play, 0x04): (
            name: "client_status",
            custom_type: Struct({
                "action": CustomType("action", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "perform_respawn"): Unit,
                        (1, "request_stats"): Unit,
                    }
                ))
            })
        ),
        (Server, Play, 0x05): (
            name: "client_settings",
            custom_type: Struct({
                "local": String(16),
                "view_distance": I8,
                "chat_mode": VarInt,
                "chat_colors": Boolean,
                "displayed_skin_parts": CustomType("displayed_skin_parts", BitFlags(
                    type: U8,
                    flags: {
                        0x01: "cape_enabled",
                        0x02: "jacket_enabled",
                        0x04: "left_sleeve_enabled",
                        0x08: "right_sleeve_enabled",
                        0x10: "left_pants_enabled",
                        0x20: "right_pants_enabled",
                        0x40: "hat_enabled",
                    }
                )),
                "main_hand": CustomType("main_hand", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "left"): Unit,
                        (1, "right"): Unit,
                    }
                )),
            })
        ),
        (Server, Play, 0x06): (
            name: "tab_complete",
            custom_type: Struct({
                "transaction_id": VarInt,
                "text": String(32500),
            })
        ),
        (Server, Play, 0x07): (
            name: "window_confirmation",
            custom_type: Struct({
                "window_id": I8,
                "action_number": I16,
                "accepted": Boolean,
            })
        ),
        (Server, Play, 0x08): (
            name: "click_window_button",
            custom_type: Struct({
                "window_id": I8,
                "button": I8,
            })
        ),
        (Server, Play, 0x09): (
            name: "click_window",
            custom_type: Struct({
                "window_id": U8,
                "slot": I16,
                "button": Key(I8),
                "action_number": I16,
                "mode": VarInt,
                "clicked_item": Shared("slot"),
            })
        ),
        (Server, Play, 0x0A): (
            name: "close_window",
            custom_type: Struct({
                "window_id": U8,
            })
        ),
        (Server, Play, 0x0B): (
            name: "plugin_message",
            custom_type: Struct({
                "channel": Shared("identifier"),
                "data": Array(
                    length: RemainingLength,
                    type: U8,
                )
            })
        ),
        (Server, Play, 0x0C): (
            name: "edit_book",
            custom_type: Struct({
                "new_book": Shared("slot"),
                "is_signed": Boolean,
                "hand": Shared("hand"),
            })
        ),
        (Server, Play, 0x0D): (
            name: "entity_nbt_request",
            custom_type: Struct({
                "transaction_id": VarInt,
                "entity_id": Shared("entity_id"),
            })
        ),
        (Server, Play, 0x0E): (
            name: "interact_entity",
            custom_type: Struct({
                "entity_id": Shared("entity_id"),
                "type": CustomType("type", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "interact"): Struct({
                            "hand": Shared("hand")
                        }),
                        (1, "attack"): Unit,
                        (2, "interact_at"): Struct({
                            "target_x": F32,
                            "target_y": F32,
                            "target_z": F32,
                            "hand": Shared("hand")
                        }),
                    }
                ))
            })
        ),
        (Server, Play, 0x0F): (
            name: "keep_alive",
            custom_type: Struct({
                "keep_alive_id": I64,
            })
        ),
        (Server, Play, 0x10): (
            name: "lock_difficulty",
            custom_type: Struct({
                "locked": Boolean,
            })
        ),
        (Server, Play, 0x11): (
            name: "player_position",
            custom_type: Struct({
                "x": F64,
                "feet_y": F64,
                "z": F64,
                "on_ground": Boolean,
            })
        ),
        (Server, Play, 0x12): (
            name: "player_position_and_rotation",
            custom_type: Struct({
                "x": F64,
                "feet_y": F64,
                "z": F64,
                "yaw": F32,
                "pitch": F32,
                "on_ground": Boolean,
            })
        ),
        (Server, Play, 0x13): (
            name: "player rotation",
            custom_type: Struct({
                "yaw": F32,
                "pitch": F32,
                "on_ground": Boolean,
            })  
        ),
        (Server, Play, 0x14): (
            name: "player_movement",
            custom_type: Struct({
                "on_ground": Boolean,
            })
        ),
        (Server, Play, 0x15): (
            name: "vehicle Move",
            custom_type: Struct({
                "x": F64,
                "y": F64,
                "z": F64,
                "yaw": F32,
                "pitch": F32,
            })
        ),
        (Server, Play, 0x16): (
            name: "steer_boat",
            custom_type: Struct({
                "left_paddle_turning": Boolean,
                "right_paddle_turning": Boolean,
            })
        ),
        (Server, Play, 0x17): (
            name: "pick_item",
            custom_type: Struct({
                "slot_to_use": VarInt,
            })
        ),
        (Server, Play, 0x18): (
            name: "craft_recipe_request",
            custom_type: Struct({
                "window_id": I8,
                "recipe": Shared("identifier"),
                "make_all": Boolean,
            })
        ),
        (Server, Play, 0x19): (
            name: "player_abilities",
            custom_type: Struct({
                "flags": CustomType("flags", BitFlags(
                    type: I8,
                    flags: {
                        0x08: "damage_disabled",
                        0x04: "can_fly",
                        0x02: "is_flying",
                        0x01: "is_creative",
                    }
                )),
                "flying_speed": F32,
                "walking_speed": F32,
            })
        ),
        (Server, Play, 0x1A): (
            name: "player_digging",
            custom_type: Struct({
                "status": CustomType("status", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "started_digging"): Unit,
                        (1, "cancelled_digging"): Unit,
                        (2, "finished_digging"): Unit,
                        (3, "drop_item_stack"): Unit,
                        (4, "drop_item"): Unit,
                        (5, "shoot_arrow_finish_eating"): Unit,
                        (6, "swap_item_in_hand"): Unit,
                    }
                )),
                "location": Shared("position"),
                "face": CustomType("face", Enum(
                    variant: Prefixed(I8),
                    variants: {
                        (0, "bottom"): Unit,
                        (1, "top"): Unit,
                        (2, "north"): Unit,
                        (3, "south"): Unit,
                        (4, "west"): Unit,
                        (5, "east"): Unit,
                    }
                ))
            })
        ),
        (Server, Play, 0x1B): (
            name: "entity_action",
            custom_type: Struct({
                "entity_id": Shared("entity_id"),
                "action_id": CustomType("action", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "start_sneaking"): Unit,
                        (1, "stop_sneaking"): Unit,
                        (2, "leave_bed"): Unit,
                        (3, "start_sprinting"): Unit,
                        (4, "stop_sprinting"): Unit,
                        (5, "start_jump_with_horse"): Unit,
                        (6, "stop_jump_with_horse"): Unit,
                        (7, "open_horse_inventory"): Unit,
                        (8, "start_flying_with_elytra"): Unit,
                    }
                )),
                "jump_boost": VarInt,
            }),
        ),
        (Server, Play, 0x1C): (
            name: "steer_vehicle",
            custom_type: Struct({
                "sideways": F32,
                "forward": F32,
                "flags": CustomType("flags", BitFlags(
                    type: U8,
                    flags: {
                        0x01: "jump",
                        0x02: "unmount",
                    }
                ))
            })
        ),
        (Server, Play, 0x1D): (
            name: "recipe_book_data",
            custom_type: Struct({
                "type": CustomType("type", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "display_name"): Struct({
                            "recipe_id": Shared("identifier"),
                        }),
                        (1, "recipe_book_states"): Struct({
                            "crafting_recipe_book_open": Boolean,
                            "crafting_recipe_filter_active": Boolean,
                            "smelting_recipe_book_open": Boolean,
                            "smelting_recipe_filter_active ": Boolean,
                        })
                    }
                )),
                "blasting_recipe_book_open": Boolean,
                "blasting_recipe_filter_active": Boolean,
                "smoking_recipe_book_open ": Boolean,
                "smoking_recipe_filter_active ": Boolean,
            })
        ),
        (Server, Play, 0x1E): (
            name: "name_item",
            custom_type: Struct({
                "item_name": String(32767),
            })
        ),
        (Server, Play, 0x1F): (
            name: "resource_pack_status",
            custom_type: Enum(
                variant: Prefixed(VarInt),
                variants: {
                    (0, "successfully_loaded"): Unit,
                    (1, "declined"): Unit,
                    (2, "failed_download"): Unit,
                    (3, "accepted"): Unit,
                }
            )
        ),
        (Server, Play, 0x20): (
            name: "advancement_tab",
            custom_type: Struct({
                "action": CustomType("action", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "opened_tab"): Struct({
                            "tab_id": Shared("identifier"),
                        }),
                        (1, "closen_screen"): Unit,
                    }
                ))
            })
        ),
        (Server, Play, 0x21): (
            name: "select_trade",
            custom_type: Struct({
                "selected_slot": VarInt,
            })
        ),
        (Server, Play, 0x22): (
            name: "set_beacon_effect",
            custom_type: Struct({
                "primary_effect": VarInt,
                "secondary_effect": VarInt,
            })
        ),
        (Server, Play, 0x23): (
            name: "held_item_change",
            custom_type: Struct({
                "slot": I16,
            })
        ),
        (Server, Play, 0x24): (
            name: "update_command_block",
            custom_type: Struct({
                "location": Shared("position"),
                "command": String(32767),
                "mode": CustomType("mode", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "sequence"): Unit,
                        (1, "auto"): Unit,
                        (2, "redstone"): Unit,
                    }
                )),
                "flags": CustomType("flags", BitFlags(
                    type: I8, 
                    flags: {
                    0x01: "track_output",
                    0x02: "is_conditional",
                    0x04: "automatic",
                }))
            })
        ),
        (Server, Play, 0x25): (
            name: "update_command_block_minecraft",
            custom_type: Struct({
                "entity_id": Shared("entity_id"),
                "command": String(0),
                "tract_output": Boolean,
            })
        ),
        (Server, Play, 0x26): (
            name: "creative_inventory_action",
            custom_type: Struct({
                "slot": I16,
                "clicked_item": Shared("slot"),
            })
        ),
        (Server, Play, 0x27): (
            name: "update_jigsaw_block",
            custom_type: Struct({
                "location": Shared("position"),
                "attachment_type": Shared("identifier"),
                "target_pool": Shared("identifier"),
                "final_state": String(0),
            })
        ),
        (Server, Play, 0x28): (
            name: "update_structure_block",
            custom_type: Struct({
                "location": Shared("postion"),
                "action": CustomType("action", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "update_data"): Unit,
                        (1, "save_structure"): Unit,
                        (2, "load_the_structure"): Unit,
                        (3, "detect_size"): Unit,
                    }
                )),
                "mode": CustomType("mode", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "save"): Unit,
                        (1, "load"): Unit,
                        (2, "corner"): Unit,
                        (3, "data"): Unit,
                    }
                )),
                "name": String(0),
                "offset_x": U8,
                "offset_y": U8,
                "offset_z": U8,
                "size_x": U8,
                "size_y": U8,
                "size_z": U8,
                "mirror": CustomType("mirror", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "none"): Unit,
                        (1, "left_right"): Unit,
                        (2, "front_back"): Unit,
                    }
                )),
                "rotation": CustomType("rotation", Enum(
                    variant: Prefixed(VarInt),
                    variants: {
                        (0, "none"): Unit,
                        (1, "clockwise_90"): Unit,
                        (2, "clockwise_180"): Unit,
                        (3, "counter_clockwise_90"): Unit,
                    }
                )),
                "metadata": String(0),
                "integrity": F32,
                "seed": VarLong,
                "flags": CustomType("flags", BitFlags(
                    type: U8,
                    flags: {
                        0x01: "ignore_entities",
                        0x02: "show_air",
                        0x04: "show_bounding_box",
                    }
                ))
            })
        ),
        (Server, Play, 0x29): (
            name: "update_sign",
            custom_type: Struct({
                "location": Shared("position"),
                "line_1": String(384),
                "line_2": String(384),
                "line_3": String(384),
                "line_4": String(384),                
            })
        ),
        (Server, Play, 0x2A): (
            name: "animation",
            custom_type: Struct({
                "hand": Shared("hand"),
            }),
        ),
        (Server, Play, 0x2B): (
            name: "spectate",
            custom_type: Struct({
                "target_player": Uuid,
            }),
        ),
        (Server, Play, 0x2C): (
            name: "player_block_placement",
            custom_type: Struct({
                "hand": Shared("hand"),
                "location": Shared("position"),
                "face": Shared("face"),
                "cursor_position_x": F32,
                "cursor_position_y": F32,
                "cursor_position_z": F32,
                "inside_block": Boolean,
            })
        ),
        (Server, Play, 0x2D): (
            name: "use item",
            custom_type: Struct({
                "hand": Shared("hand")
            }),
        )
    },
    shared_types: {
        "hand": Enum(
            variant: Prefixed(VarInt),
            variants: {
                (0, "main_hand"): Unit,
                (1, "off_hand"): Unit,
            },
        ),
        "position": BitField({
            "x": I32(26),
            "z": I32(26),
            "y": I16(12),
        }),
        "face": Enum(
            variant: Prefixed(VarInt),
            variants: {
                (0, "bottom"): Unit,
                (1, "top"): Unit,
                (2, "north"): Unit,
                (3, "south"): Unit,
                (4, "west"): Unit,
                (5, "east"): Unit,
            }
        ),
        "slot": Enum(
            variant: Prefixed(Boolean),
            variants: {
                (true, "item"): Struct({
                    "id": VarInt,
                    "count": VarInt,
                    "nbt": Nbt, 
                }),
                (false, "empty"): Unit,
            }
        )
    },
)