(
    version: 578,
    packets: {
        (Client, Status, 0): Struct(
            name: "response",
            fields: {
                "json_lenght": VarInt,
                "json_response": String(32767),
            },
        ),
        (Client, Status, 1): Struct(
            name: "pong",
            fields: {
                "payload": I64,
            },
        ),
        (Client, Login, 0): Struct(
            name: "disconnect",
            fields: {
                "reason": Shared("chat"),
            },
        ),
        (Client, Login, 1): Struct(
            name: "encryption_request",
            fields: {
                "server_id": String(20),
                "public_key": Array(
                    length: Prefixed(VarInt),
                    type: U8,
                ),
                "verify_token": Array(
                    length: Prefixed(VarInt),
                    type: U8,
                ),
            },
        ),
        (Client, Login, 2): Struct(
            name: "login_success",
            fields: {
                "uuid": String(36),
                "username": String(16),
            },
        ),
        (Client, Login, 3): Struct(
            name: "set_compression",
            fields: {
                "threshold": VarInt,
            },
        ),
        (Client, Login, 4): Struct(
            name: "login_plugin_request",
            fields: {
                "message_id": VarInt,
                "channel": Shared("identifier"),
                "data": Array(
                    length: RemainingLength,
                    type: U8,
                ),
            },
        ),
        (Client, Play, 0): Struct(
            name: "spawn_entity",
            fields: {
                "entity_id": Shared("entity_id"),
                "object_uuid": Uuid,
                "type": VarInt,
                "x": F64,
                "y": F64,
                "z": F64,
                "pitch": U8,
                "yaw": U8,
                "data": I32,
                "velocity_x": I16,
                "velocity_y": I16,
                "velocity_z": I16,
            },
        ),
        (Client, Play, 1): Struct(
            name: "spawn_experience_orb",
            fields: {
                "entity_id": Shared("entity_id"),
                "x": F64,
                "y": F64,
                "z": F64,
                "count": I16,
            },
        ),
        (Client, Play, 2): Struct(
            name: "spawn_weather_entity",
            fields: {
                "entity_id": Shared("entity_id"),
                "type": Enum(
                    name: "type",
                    variant: Prefixed(VarInt),
                    variants: {
                        1: Unit(
                            name: "thunderbolt",
                        ),
                    },
                ),
                "x": F64,
                "y": F64,
                "z": F64,
            },
        ),
        (Client, Play, 3): Struct(
            name: "spawn_living_entity",
            fields: {
                "entity_id": Shared("entity_id"),
                "entity_uuid": Uuid,
                "type": VarInt,
                "x": F64,
                "y": F64,
                "z": F64,
                "yaw": U16,
                "pitch": U16,
                "head_pitch": U16,
                "velocity_x": I16,
                "velocity_y": I16,
                "velocity_z": I16,
            },
        ),
        (Client, Play, 4): Struct(
            name: "spawn_painting",
            fields: {
                "entity_id": Shared("entity_id"),
                "entity_uuid": Uuid,
                "motive": Enum(
                    name: "motive",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "kebab",
                        ),
                        1: Unit(
                            name: "aztec",
                        ),
                        2: Unit(
                            name: "alban",
                        ),
                        3: Unit(
                            name: "aztec2",
                        ),
                        4: Unit(
                            name: "bomb",
                        ),
                        5: Unit(
                            name: "plant",
                        ),
                        6: Unit(
                            name: "wasteland",
                        ),
                        7: Unit(
                            name: "pool",
                        ),
                        8: Unit(
                            name: "courbet",
                        ),
                        9: Unit(
                            name: "sea",
                        ),
                        10: Unit(
                            name: "sunset",
                        ),
                        11: Unit(
                            name: "creebet",
                        ),
                        12: Unit(
                            name: "wanderer",
                        ),
                        13: Unit(
                            name: "graham",
                        ),
                        14: Unit(
                            name: "match",
                        ),
                        15: Unit(
                            name: "bust",
                        ),
                        16: Unit(
                            name: "stage",
                        ),
                        17: Unit(
                            name: "void",
                        ),
                        18: Unit(
                            name: "skull_and_roses",
                        ),
                        19: Unit(
                            name: "wither",
                        ),
                        20: Unit(
                            name: "fighters",
                        ),
                        21: Unit(
                            name: "pointer",
                        ),
                        22: Unit(
                            name: "pigscene",
                        ),
                        23: Unit(
                            name: "burning_skull",
                        ),
                        24: Unit(
                            name: "skeleton",
                        ),
                        25: Unit(
                            name: "donkey_kong",
                        ),
                    },
                ),
                "location": Shared("position"),
                "direction": Enum(
                    name: "direction",
                    variant: Prefixed(U8),
                    variants: {
                        0: Unit(
                            name: "south",
                        ),
                        1: Unit(
                            name: "west",
                        ),
                        2: Unit(
                            name: "north",
                        ),
                        3: Unit(
                            name: "east",
                        ),
                    },
                ),
            },
        ),
        (Client, Play, 5): Struct(
            name: "spawn_player",
            fields: {
                "entity_id": Shared("entity_id"),
                "player_uuid": Uuid,
                "x": F64,
                "y": F64,
                "z": F64,
                "yaw": U8,
                "pitch": U8,
            },
        ),
        (Client, Play, 6): Struct(
            name: "entity_animation",
            fields: {
                "entity_id": Shared("entity_id"),
                "animation": Enum(
                    name: "animation",
                    variant: Prefixed(U8),
                    variants: {
                        0: Unit(
                            name: "swing_main_arm",
                        ),
                        1: Unit(
                            name: "take_damage",
                        ),
                        2: Unit(
                            name: "leave_bed",
                        ),
                        3: Unit(
                            name: "swing_offhand",
                        ),
                        4: Unit(
                            name: "critical_effect",
                        ),
                        5: Unit(
                            name: "magic_critical_effect",
                        ),
                    },
                ),
            },
        ),
        (Client, Play, 7): Struct(
            name: "statistics",
            fields: {
                "statistics": Array(
                    length: Prefixed(VarInt),
                    type: Struct(
                        name: "statistic",
                        fields: {
                            "category_id": VarInt,
                            "statistic_id": VarInt,
                        },
                    ),
                ),
                "value": VarInt,
            },
        ),
        (Client, Play, 8): Struct(
            name: "acknowledge_player_digging",
            fields: {
                "location": Shared("position"),
                "block": VarInt,
                "status": Enum(
                    name: "status",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "started_digging",
                        ),
                        1: Unit(
                            name: "cancelled_digging",
                        ),
                        2: Unit(
                            name: "finished_digging",
                        ),
                    },
                ),
                "successful": Boolean,
            },
        ),
        (Client, Play, 9): Struct(
            name: "block_break_animation",
            fields: {
                "entity_id": Shared("entity_id"),
                "location": Shared("position"),
                "destroy_stage": I8,
            },
        ),
        (Client, Play, 10): Struct(
            name: "block_entity_data",
            fields: {
                "location": Shared("position"),
                "action": U8,
                "nbt_data": Shared("nbt_tag"),
            },
        ),
        (Client, Play, 11): Struct(
            name: "block_action",
            fields: {
                "location": Shared("position"),
                "action_id": U8,
                "action_param": U8,
                "block_type": VarInt,
            },
        ),
        (Client, Play, 12): Struct(
            name: "block_change",
            fields: {
                "location": Shared("position"),
                "block_id": VarInt,
            },
        ),
        (Client, Play, 13): Struct(
            name: "boss_bar",
            fields: {
                "uuid": Uuid,
                "action": Enum(
                    name: "action",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Struct(
                            name: "add",
                            fields: {
                                "title": Shared("chat"),
                                "health": F32,
                                "color": Shared("color"),
                                "division": Shared("division"),
                                "flags": BitFlags(
                                    name: "flags",
                                    type: U8,
                                    flags: {
                                        1: "darken_sky",
                                        2: "dragon_bar",
                                        4: "create_fog",
                                    },
                                ),
                            },
                        ),
                        1: Unit(
                            name: "remove",
                        ),
                        2: Struct(
                            name: "update_health",
                            fields: {
                                "health": F32,
                            },
                        ),
                        3: Struct(
                            name: "update_title",
                            fields: {
                                "title": Shared("chat"),
                            },
                        ),
                        4: Struct(
                            name: "update_style",
                            fields: {
                                "color": Shared("color"),
                                "dividers": Shared("division"),
                            },
                        ),
                        5: Struct(
                            name: "update_flags",
                            fields: {
                                "flags": U8,
                            },
                        ),
                    },
                ),
            },
        ),
        (Client, Play, 14): Struct(
            name: "server_difficulty",
            fields: {
                "difficulty": Shared("difficulty"),
                "difficulty_locked": Boolean,
            },
        ),
        (Client, Play, 15): Struct(
            name: "chat_message",
            fields: {
                "json_data": Shared("chat"),
                "position": Enum(
                    name: "position",
                    variant: Prefixed(I8),
                    variants: {
                        0: Unit(
                            name: "chat",
                        ),
                        1: Unit(
                            name: "system_message",
                        ),
                        2: Unit(
                            name: "game_info",
                        ),
                    },
                ),
            },
        ),
        (Client, Play, 16): Struct(
            name: "multi_block_change",
            fields: {
                "chunk_x": I32,
                "chunk_z": I32,
                "record": Array(
                    length: Prefixed(VarInt),
                    type: Struct(
                        name: "record",
                        fields: {
                            "horizontal_position": U8,
                            "y_coordinate": U8,
                            "block_id": VarInt,
                        },
                    ),
                ),
            },
        ),
        (Client, Play, 17): Struct(
            name: "tab_complete",
            fields: {
                "id": VarInt,
                "start": VarInt,
                "lentgh": VarInt,
                "count": VarInt,
                "matches": Array(
                    length: Prefixed(VarInt),
                    type: Struct(
                        name: "matches",
                        fields: {
                            "match": String(32767),
                            "tooltip": Option(Shared("chat")),
                        },
                    ),
                ),
            },
        ),
        (Client, Play, 18): Struct(
            name: "declare_command",
            fields: {
                "count": VarInt,
                "nodes": VarInt,
                "length": Array(
                    length: Prefixed(VarInt),
                    type: Shared("node"),
                ),
                "root_index": VarInt,
            },
        ),
        (Client, Play, 19): Struct(
            name: "window_confirmation",
            fields: {
                "window_id": I8,
                "action_number": U16,
                "accepted": Boolean,
            },
        ),
        (Client, Play, 20): Struct(
            name: "close_window",
            fields: {
                "window_id": U8,
            },
        ),
        (Client, Play, 21): Struct(
            name: "window_items",
            fields: {
                "window_id": U8,
                "count": I16,
                "slot_data": Array(
                    length: Prefixed(VarInt),
                    type: Shared("slot"),
                ),
            },
        ),
        (Client, Play, 22): Struct(
            name: "window_property",
            fields: {
                "window_id": U8,
                "property": I16,
                "value": I16,
            },
        ),
        (Client, Play, 23): Struct(
            name: "set_slot",
            fields: {
                "window_id": U8,
                "slot": I16,
                "slot_data": Shared("slot"),
            },
        ),
        (Client, Play, 24): Struct(
            name: "set_cooldown",
            fields: {
                "item_id": VarInt,
                "cooldown_ticks": VarInt,
            },
        ),
        (Client, Play, 25): Struct(
            name: "plugin_message",
            fields: {
                "channel": Shared("identifier"),
                "data": Array(
                    length: Prefixed(VarInt),
                    type: I8,
                ),
            },
        ),
        (Client, Play, 26): Struct(
            name: "named_sound_effect",
            fields: {
                "sound_name": Shared("identifier"),
                "sound_category": Enum(
                    name: "sound_category",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "master",
                        ),
                        1: Unit(
                            name: "music",
                        ),
                        2: Unit(
                            name: "record",
                        ),
                        3: Unit(
                            name: "weather",
                        ),
                        4: Unit(
                            name: "block",
                        ),
                        5: Unit(
                            name: "hostile",
                        ),
                        6: Unit(
                            name: "neutral",
                        ),
                        7: Unit(
                            name: "player",
                        ),
                        8: Unit(
                            name: "ambient",
                        ),
                        9: Unit(
                            name: "voice",
                        ),
                    },
                ),
                "effect_position_x": I32,
                "effect_position_y": I32,
                "effect_position_z": I32,
                "volume": F32,
                "pitch": F32,
            },
        ),
        (Client, Play, 27): Struct(
            name: "disconnect",
            fields: {
                "reason": Shared("chat"),
            },
        ),
        (Client, Play, 28): Struct(
            name: "entity_status",
            fields: {
                "entity_id": I32,
                "entity_status": U8,
            },
        ),
        (Client, Play, 29): Struct(
            name: "explosion",
            fields: {
                "x": F32,
                "y": F32,
                "z": F32,
                "strength": F32,
                "record_count": I32,
                "records": Array(
                    length: Prefixed(VarInt),
                    type: Struct(
                        name: "relative_location",
                        fields: {
                            "x": I8,
                            "y": I8,
                            "z": I8,
                        },
                    ),
                ),
                "player_motion_x": F32,
                "player_motion_y": F32,
                "player_motion_z": F32,
            },
        ),
        (Client, Play, 30): Struct(
            name: "unload_chunk",
            fields: {
                "chunk_x": I32,
                "chunk_y": I32,
            },
        ),
        (Client, Play, 31): Struct(
            name: "change_game_state",
            fields: {
                "reason": Enum(
                    name: "sound_category",
                    variant: Prefixed(U8),
                    variants: {
                        0: Unit(
                            name: "invalid_bed",
                        ),
                        1: Unit(
                            name: "end_raining",
                        ),
                        2: Unit(
                            name: "begin_raining",
                        ),
                        3: Unit(
                            name: "change_gamemode",
                        ),
                        4: Unit(
                            name: "exit_end",
                        ),
                        5: Unit(
                            name: "demo_message",
                        ),
                        6: Unit(
                            name: "arrow_hitting_player",
                        ),
                        7: Unit(
                            name: "fade_value",
                        ),
                        8: Unit(
                            name: "fade_time",
                        ),
                        9: Unit(
                            name: "play_pufferfish_sting_sound",
                        ),
                        10: Unit(
                            name: "play_elder_guardian_mob_apperance",
                        ),
                        11: Unit(
                            name: "enable_respawn_screen",
                        ),
                    },
                ),
                "value": F32,
            },
        ),
        (Client, Play, 32): Struct(
            name: "open_horse_window",
            fields: {
                "window_id": I8,
                "number_of_slots": VarInt,
                "entity_id": I32,
            },
        ),
        (Client, Play, 33): Struct(
            name: "keep_alive",
            fields: {
                "keep_alive_id": I64,
            },
        ),
        (Client, Play, 34): Struct(
            name: "chunk_data",
            fields: {
                "chunk_x": I32,
                "chunk_z": I32,
                "full_chunk": Boolean,
                "primary_bit_mask": VarInt,
                "heightmaps": Nbt,
                "biomes": Option(Array(
                    length: Prefixed(VarInt),
                    type: I32,
                )),
                "data": Array(
                    length: Prefixed(VarInt),
                    type: I8,
                ),
                "number_of_block_entities": VarInt,
                "block_entities": Array(
                    length: Prefixed(VarInt),
                    type: Nbt,
                ),
            },
        ),
        (Client, Play, 35): Struct(
            name: "effect",
            fields: {
                "effect_id": I32,
                "location": Shared("position"),
                "data": I32,
                "disable_relative_volume": Boolean,
            },
        ),
        (Client, Play, 36): Struct(
            name: "particle",
            fields: {
                "particle_id": I32,
                "long_distance": Boolean,
                "x": F64,
                "y": F64,
                "z": F64,
                "offset_x": F32,
                "offset_y": F32,
                "offset_z": F32,
                "particle_data": F32,
                "particle_count": I32,
                "data": I32,
            },
        ),
        (Client, Play, 37): Struct(
            name: "update_light",
            fields: {
                "chunk_x": VarInt,
                "chunk_z": VarInt,
                "sky_light_mask": VarInt,
                "block_light_mask": VarInt,
                "empty_sky_light_mask": VarInt,
                "empty_block_light_mask": VarInt,
                "sky_light_arrays": Array(
                    length: FixedLength(2048),
                    type: I8,
                ),
                "block_light_arrays": Array(
                    length: FixedLength(2048),
                    type: I8,
                ),
            },
        ),
        (Client, Play, 38): Struct(
            name: "join_game",
            fields: {
                "entity_id": I32,
                "gamemode": Shared("gamemode"),
                "dimension": Shared("dimension"),
                "hashed_seed": I64,
                "max_players": U8,
                "level_type": Enum(
                    name: "level_type",
                    variant: Prefixed(String(16)),
                    variants: {
                        "amplified": Unit(
                            name: "amplified",
                        ),
                        "buffet": Unit(
                            name: "buffet",
                        ),
                        "customized": Unit(
                            name: "customized",
                        ),
                        "default": Unit(
                            name: "default",
                        ),
                        "default_1_1": Unit(
                            name: "default_1_1",
                        ),
                        "flat": Unit(
                            name: "flat",
                        ),
                        "largeBiomes": Unit(
                            name: "largeBiomes",
                        ),
                    },
                ),
                "view_distance": VarInt,
                "reduced_debug_info": Boolean,
                "enable_respawn_screen": Boolean,
            },
        ),
        (Client, Play, 39): Struct(
            name: "map_data",
            fields: {
                "map_id": VarInt,
                "scale": I8,
                "tracking_position": Boolean,
                "locked": Boolean,
                "icon_count": VarInt,
                "icon": Array(
                    length: Prefixed(VarInt),
                    type: Struct(
                        name: "icon",
                        fields: {
                            "type": VarInt,
                            "x": I8,
                            "z": I8,
                            "direction": I8,
                            "display_name": Option(Shared("chat")),
                        },
                    ),
                ),
                "columns": U8,
                "rows": Option(U8),
                "x": Option(U8),
                "z": Option(U8),
                "data": Option(Array(
                    length: Prefixed(VarInt),
                    type: U8,
                )),
            },
        ),
        (Client, Play, 40): Struct(
            name: "trade_list",
            fields: {
                "window_id": VarInt,
                "size": I8,
                "trades": Array(
                    length: Prefixed(I8),
                    type: Struct(
                        name: "trade",
                        fields: {
                            "input_item_1": Shared("slot"),
                            "output_item": Shared("slot"),
                            "input_item_2": Option(Shared("slot")),
                            "trade_disabled": Boolean,
                            "number_of_trade_uses": I32,
                            "maximum_number_of_trade_uses": I32,
                            "xp": I32,
                            "special_price": I32,
                            "price_multiplier": F32,
                            "demand": I32,
                        },
                    ),
                ),
                "villager_level": VarInt,
                "experience": VarInt,
                "is_regular_villager": Boolean,
                "can_restock": Boolean,
            },
        ),
        (Client, Play, 41): Struct(
            name: "entity_position",
            fields: {
                "entity_id": VarInt,
                "delta_x": I16,
                "delta_y": I16,
                "delta_z": I16,
                "on_ground": Boolean,
            },
        ),
        (Client, Play, 42): Struct(
            name: "entity_position_and_rotation",
            fields: {
                "entity_id": VarInt,
                "delta_x": I16,
                "delta_y": I16,
                "delta_z": I16,
                "yaw": U8,
                "pitch": U8,
                "on_ground": Boolean,
            },
        ),
        (Client, Play, 43): Struct(
            name: "entity_rotation",
            fields: {
                "entity_id": VarInt,
                "yaw": U8,
                "pitch": U8,
                "on_ground": Boolean,
            },
        ),
        (Client, Play, 44): Struct(
            name: "entity_movement",
            fields: {
                "entity_id": VarInt,
            },
        ),
        (Client, Play, 45): Struct(
            name: "vehicle_move",
            fields: {
                "x": F64,
                "y": F64,
                "z": F64,
                "yaw": F32,
                "pitch": F32,
            },
        ),
        (Client, Play, 46): Struct(
            name: "open_book",
            fields: {
                "hand": Enum(
                    name: "hand",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "main_hand",
                        ),
                        1: Unit(
                            name: "off_hand",
                        ),
                    },
                ),
            },
        ),
        (Client, Play, 47): Struct(
            name: "open_window",
            fields: {
                "window_id": VarInt,
                "window_type": VarInt,
                "window_title": Shared("chat"),
            },
        ),
        (Client, Play, 48): Struct(
            name: "open_sign_editor",
            fields: {
                "location": Shared("position"),
            },
        ),
        (Client, Play, 49): Struct(
            name: "craft_recipe_response",
            fields: {
                "window_id": I8,
                "recipe": String(32767),
            },
        ),
        (Client, Play, 50): Struct(
            name: "player_abilities",
            fields: {
                "flags": BitFlags(
                    name: "player_abilities",
                    type: U8,
                    flags: {
                        1: "invulnerable",
                        2: "flying",
                        4: "allow_flying",
                        8: "creative_mode",
                    },
                ),
                "recipe": String(32767),
            },
        ),
        (Client, Play, 51): Struct(
            name: "combat_event",
            fields: {
                "event": Enum(
                    name: "combat_event",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "enter_combat",
                        ),
                        1: Struct(
                            name: "end_combat",
                            fields: {
                                "duration": VarInt,
                                "entity_id": I32,
                            },
                        ),
                        2: Struct(
                            name: "entity_dead",
                            fields: {
                                "player_id": VarInt,
                                "entity_id": I32,
                                "message": Shared("chat"),
                            },
                        ),
                    },
                ),
            },
        ),
        (Client, Play, 53): Struct(
            name: "face_player",
            fields: {
                "feet_eyes": Shared("feet_eyes"),
                "target_x": F64,
                "target_y": F64,
                "target_z": F64,
                "is_entity": Boolean,
                "entity_id": Option(VarInt),
                "entity_feet_eyes": Option(Shared("feet_eyes")),
            },
        ),
        (Client, Play, 54): Struct(
            name: "player_position_and_look",
            fields: {
                "x": F64,
                "y": F64,
                "z": F64,
                "yaw": F32,
                "pitch": F32,
                "flags": BitFlags(
                    name: "flags",
                    type: U8,
                    flags: {
                        1: "x",
                        2: "z",
                        4: "y",
                    },
                ),
                "teleport_id": VarInt,
            },
        ),
        (Client, Play, 56): Struct(
            name: "destroy_entities",
            fields: {
                "count": VarInt,
                "entity_ids": Array(
                    length: Prefixed(VarInt),
                    type: VarInt,
                ),
            },
        ),
        (Client, Play, 57): Struct(
            name: "remove_entity_effect",
            fields: {
                "entity_id": VarInt,
                "effect_id": I8,
            },
        ),
        (Client, Play, 58): Struct(
            name: "resource_pack_send",
            fields: {
                "url": String(32767),
                "hash": String(40),
            },
        ),
        (Client, Play, 59): Struct(
            name: "respawn",
            fields: {
                "dimension": String(32767),
                "hashed_seed": F64,
                "gamemode": Shared("gamemode"),
                "level_type": String(16),
            },
        ),
        (Client, Play, 60): Struct(
            name: "entity_head_look",
            fields: {
                "entity_id": VarInt,
                "head_yaw": U8,
            },
        ),
        (Client, Play, 61): Struct(
            name: "select_advancement_tab",
            fields: {
                "identifier": Option(String(32767)),
            },
        ),
        (Client, Play, 62): Struct(
            name: "world_border",
            fields: {
                "action": Enum(
                    name: "world_border_action",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Struct(
                            name: "set_size",
                            fields: {
                                "diameter": F64,
                            },
                        ),
                        1: Struct(
                            name: "lerp_size",
                            fields: {
                                "old_diameter": F64,
                                "new_diameter": F64,
                                "speed": VarLong,
                            },
                        ),
                        2: Struct(
                            name: "set_center",
                            fields: {
                                "x": F64,
                                "z": F64,
                            },
                        ),
                        3: Struct(
                            name: "intitialize",
                            fields: {
                                "x": F64,
                                "z": F64,
                                "old_diameter": F64,
                                "new_diameter": F64,
                                "speed": VarLong,
                                "portal_teleport_boundary": VarInt,
                                "warning_time": VarInt,
                                "warning_blocks": VarInt,
                            },
                        ),
                        4: Struct(
                            name: "set_warning_time",
                            fields: {
                                "warning_time": VarInt,
                            },
                        ),
                        5: Struct(
                            name: "set_warning_blocks",
                            fields: {
                                "warning_blocks": VarInt,
                            },
                        ),
                    },
                ),
            },
        ),
        (Client, Play, 63): Struct(
            name: "camera",
            fields: {
                "camera_id": VarInt,
            },
        ),
        (Client, Play, 64): Struct(
            name: "held_item_change",
            fields: {
                "slot": I8,
            },
        ),
        (Client, Play, 65): Struct(
            name: "update_view_position",
            fields: {
                "chunk_x": VarInt,
                "chunk_y": VarInt,
            },
        ),
        (Client, Play, 66): Struct(
            name: "update_view_distance",
            fields: {
                "view_distance": VarInt,
            },
        ),
        (Client, Play, 67): Struct(
            name: "display_scoreboard",
            fields: {
                "position": I8,
                "score_namme": String(16),
            },
        ),
        (Client, Play, 69): Struct(
            name: "attach_entity",
            fields: {
                "attached_entity_id": I32,
                "holding_entity_id": I32,
            },
        ),
        (Client, Play, 70): Struct(
            name: "entity_velocity",
            fields: {
                "entity_id": VarInt,
                "velocity_x": I16,
                "velocity_y": I16,
                "velocity_z": I16,
            },
        ),
        (Client, Play, 71): Struct(
            name: "entity_equipement",
            fields: {
                "entity_id": VarInt,
                "slot": Enum(
                    name: "equipement_slot",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "main_hand",
                        ),
                        1: Unit(
                            name: "off_hand",
                        ),
                        2: Unit(
                            name: "boots",
                        ),
                        3: Unit(
                            name: "leggings",
                        ),
                        4: Unit(
                            name: "chestplate",
                        ),
                        5: Unit(
                            name: "helmet",
                        ),
                    },
                ),
                "item": Shared("slot"),
            },
        ),
        (Client, Play, 72): Struct(
            name: "set_experience",
            fields: {
                "experience_bar": F32,
                "level": VarInt,
                "total_experience": VarInt,
            },
        ),
        (Client, Play, 73): Struct(
            name: "update_health",
            fields: {
                "health": F32,
                "food": VarInt,
                "food_stauration": F32,
            },
        ),
        (Client, Play, 74): Struct(
            name: "scoreboard_objective",
            fields: {
                "objective_name": String(16),
                "mode": Enum(
                    name: "scoreboard_action",
                    variant: Prefixed(I8),
                    variants: {
                        0: Unit(
                            name: "create",
                        ),
                        1: Unit(
                            name: "remove",
                        ),
                        2: Unit(
                            name: "update",
                        ),
                    },
                ),
                "objective_value": Option(String(32767)),
                "type": Option(Enum(
                    name: "scoreboard_mode",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "integer",
                        ),
                        1: Unit(
                            name: "hearts",
                        ),
                    },
                )),
            },
        ),
        (Client, Play, 75): Struct(
            name: "set_passengers",
            fields: {
                "entity_id": VarInt,
                "passenger_count": VarInt,
                "passengers": Array(
                    length: Prefixed(U32),
                    type: VarInt,
                ),
            },
        ),
        (Client, Play, 76): Struct(
            name: "teams",
            fields: {
                "team name": String(16),
                "mode": I8,
                "action": Enum(
                    name: "teams_action",
                    variant: Prefixed(U8),
                    variants: {
                        0: Struct(
                            name: "create_team",
                            fields: {
                                "team_display_name": String(32767),
                                "friendly_flags": BitFlags(
                                    name: "friendly_flags",
                                    type: U8,
                                    flags: {
                                        1: "allow_friendly_fire",
                                        2: "can_see_invisible_players_on_same_team",
                                    },
                                ),
                                "name_tag_visibility": Enum(
                                    name: "name_tag_visibility",
                                    variant: Prefixed(String(32)),
                                    variants: {
                                        "always": Unit(
                                            name: "always",
                                        ),
                                        "hideForOtherTeams": Unit(
                                            name: "hide_for_other_teams",
                                        ),
                                        "hideForOwnTeam": Unit(
                                            name: "hide_for_own_team",
                                        ),
                                        "neve": Unit(
                                            name: "never",
                                        ),
                                    },
                                ),
                                "collision_rule": Enum(
                                    name: "collision_rule",
                                    variant: Prefixed(String(32)),
                                    variants: {
                                        "always": Unit(
                                            name: "always",
                                        ),
                                        "never": Unit(
                                            name: "never",
                                        ),
                                        "pushOtherTeams": Unit(
                                            name: "push_other_teams",
                                        ),
                                        "pushOwnTeam": Unit(
                                            name: "push_own_team",
                                        ),
                                    },
                                ),
                                "team_color": VarInt,
                                "team_prefix": String(32767),
                                "team_suffix": String(32767),
                                "entity_count": VarInt,
                                "entities": Array(
                                    length: Prefixed(I32),
                                    type: String(40),
                                ),
                            },
                        ),
                        1: Unit(
                            name: "remove_team",
                        ),
                        2: Struct(
                            name: "update_team_info",
                            fields: {
                                "team_display_name": String(32767),
                                "friendly_flags": BitFlags(
                                    name: "friendly_flags",
                                    type: U8,
                                    flags: {
                                        1: "allow_friendly_fire",
                                        2: "can_see_invisible_players_on_same_team",
                                    },
                                ),
                                "name_tag_visibility": Enum(
                                    name: "name_tag_visibility",
                                    variant: Prefixed(String(32)),
                                    variants: {
                                        "always": Unit(
                                            name: "always",
                                        ),
                                        "hideForOtherTeams": Unit(
                                            name: "hide_for_other_team",
                                        ),
                                        "hideForOwnTeam": Unit(
                                            name: "hide_for_own_team",
                                        ),
                                        "never": Unit(
                                            name: "never",
                                        ),
                                    },
                                ),
                                "collision_rule": Enum(
                                    name: "collision_rule",
                                    variant: Prefixed(String(32)),
                                    variants: {
                                        "always": Unit(
                                            name: "always",
                                        ),
                                        "never": Unit(
                                            name: "never",
                                        ),
                                        "pushOtherTeams": Unit(
                                            name: "push_other_teams",
                                        ),
                                        "pushOwnTeam": Unit(
                                            name: "push_own_team",
                                        ),
                                    },
                                ),
                                "team_color": VarInt,
                                "team_prefix": String(32767),
                                "team_suffix": String(32767),
                            },
                        ),
                        3: Struct(
                            name: "add_players_to_team",
                            fields: {
                                "entities": Array(
                                    length: Prefixed(VarInt),
                                    type: String(40),
                                ),
                            },
                        ),
                        4: Struct(
                            name: "remove_players_from_team",
                            fields: {
                                "entities": Array(
                                    length: Prefixed(VarInt),
                                    type: String(40),
                                ),
                            },
                        ),
                    },
                ),
            },
        ),
        (Client, Play, 77): Struct(
            name: "update_score",
            fields: {
                "entity_name": String(40),
                "action": Enum(
                    name: "item_action",
                    variant: Prefixed(I8),
                    variants: {
                        0: Unit(
                            name: "create_or_update",
                        ),
                        1: Unit(
                            name: "remove",
                        ),
                    },
                ),
                "objective_name": String(16),
                "value": Option(VarInt),
            },
        ),
        (Client, Play, 78): Struct(
            name: "spawn_position",
            fields: {
                "location": Shared("position"),
            },
        ),
        (Client, Play, 79): Struct(
            name: "time_update",
            fields: {
                "world_age": I64,
                "time_of_day": I64,
            },
        ),
        (Client, Play, 80): Struct(
            name: "title",
            fields: {
                "action": Enum(
                    name: "title_action",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Struct(
                            name: "set_title",
                            fields: {
                                "title_text": String(32767),
                            },
                        ),
                        1: Struct(
                            name: "set_subtitle",
                            fields: {
                                "subtitle_text": String(32767),
                            },
                        ),
                        2: Struct(
                            name: "set_action_bar",
                            fields: {
                                "action_bar_text": String(32767),
                            },
                        ),
                        3: Struct(
                            name: "set_times_and_display",
                            fields: {
                                "fade_in": I32,
                                "stay": I32,
                                "fade_out": I32,
                            },
                        ),
                        4: Unit(
                            name: "hide",
                        ),
                        5: Unit(
                            name: "reset",
                        ),
                    },
                ),
            },
        ),
        (Client, Play, 81): Struct(
            name: "entity_sound_effect",
            fields: {
                "sound_id": VarInt,
                "sound_category": VarInt,
                "entity_id": VarInt,
                "volume": F32,
                "pitch": F32,
            },
        ),
        (Client, Play, 82): Struct(
            name: "sound_effect",
            fields: {
                "sound_id": VarInt,
                "sound_category": VarInt,
                "effect_position_x": I32,
                "effect_position_y": I32,
                "effect_position_z": I32,
                "volume": F32,
                "pitch": F32,
            },
        ),
        (Client, Play, 83): Struct(
            name: "stop_sound",
            fields: {
                "flags": I8,
                "source": Option(VarInt),
                "sound": Option(String(32767)),
            },
        ),
        (Client, Play, 84): Struct(
            name: "player_list_header_and_footer",
            fields: {
                "header": String(32767),
                "footer": String(32767),
            },
        ),
        (Client, Play, 85): Struct(
            name: "nbt_query_response",
            fields: {
                "transaction_id": VarInt,
                "nbt": Nbt,
            },
        ),
        (Client, Play, 86): Struct(
            name: "collect_item",
            fields: {
                "collected_entity_id": VarInt,
                "collector_entity_id": VarInt,
                "pickup_item_count": VarInt,
            },
        ),
        (Client, Play, 87): Struct(
            name: "entity_teleport",
            fields: {
                "entity_id": VarInt,
                "x": F64,
                "y": F64,
                "z": F64,
                "yaw": U8,
                "pitch": U8,
                "on_ground": Boolean,
            },
        ),
        (Client, Play, 89): Struct(
            name: "entity_properties",
            fields: {
                "entity_id": VarInt,
                "property": Array(
                    length: Prefixed(I32),
                    type: Struct(
                        name: "entity_property",
                        fields: {
                            "key": String(64),
                            "value": F64,
                            "number_of_modifiers": VarInt,
                            "modifiers": Array(
                                length: Prefixed(VarInt),
                                type: Struct(
                                    name: "entity_modifiers",
                                    fields: {
                                        "uuid": Uuid,
                                        "amount": F64,
                                        "operation": I8,
                                    },
                                ),
                            ),
                        },
                    ),
                ),
            },
        ),
        (Client, Play, 90): Struct(
            name: "entity_effect",
            fields: {
                "entity_id": VarInt,
                "effect_id": I8,
                "amplifier": I8,
                "duration": VarInt,
                "flags": BitFlags(
                    name: "entity_effect_flags",
                    type: I32,
                    flags: {
                        1: "is_ambient",
                        2: "show_particles",
                        4: "show_icon",
                    },
                ),
            },
        ),
        (Client, Play, 91): Struct(
            name: "declare_recipes",
            fields: {
                "recipes": Array(
                    length: Prefixed(VarInt),
                    type: Struct(
                        name: "recipe",
                        fields: {
                            "recipe_id": String(32767),
                            "data": Enum(
                                name: "data",
                                variant: Prefixed(String(32)),
                                variants: {
                                    "crafting_shaped": Struct(
                                        name: "crafting_shaped",
                                        fields: {
                                            "width": VarInt,
                                            "height": VarInt,
                                            "group": String(128),
                                            "ingredients": Array(
                                                length: Prefixed(VarInt),
                                                type: Array(
                                                    length: Prefixed(VarInt),
                                                    type: Shared("slot"),
                                                ),
                                            ),
                                            "result": Shared("slot"),
                                        },
                                    ),
                                    "crafting_shapeless": Struct(
                                        name: "crafting_shapeless",
                                        fields: {
                                            "group": String(128),
                                            "ingredients": Array(
                                                length: Prefixed(VarInt),
                                                type: Array(
                                                    length: Prefixed(VarInt),
                                                    type: Shared("slot"),
                                                ),
                                            ),
                                            "result": Shared("slot"),
                                        },
                                    ),
                                    "crafting_special_armordye": Unit(
                                        name: "crafting_special_armordye",
                                    ),
                                    "crafting_special_banneraddpattern": Unit(
                                        name: "crafting_special_banneraddpattern",
                                    ),
                                    "crafting_special_bannerduplicate": Unit(
                                        name: "crafting_special_bannerduplicate",
                                    ),
                                    "crafting_special_bookcloning": Unit(
                                        name: "crafting_special_bookcloning",
                                    ),
                                    "crafting_special_firework_rocket": Unit(
                                        name: "crafting_special_firework_rocket",
                                    ),
                                    "crafting_special_firework_star": Unit(
                                        name: "crafting_special_firework_star",
                                    ),
                                    "crafting_special_firework_star_fade": Unit(
                                        name: "crafting_special_firework_star_fade",
                                    ),
                                    "crafting_special_mapcloning": Unit(
                                        name: "crafting_special_mapcloning",
                                    ),
                                    "crafting_special_mapextending": Unit(
                                        name: "crafting_special_mapextending",
                                    ),
                                    "crafting_special_repairitem": Unit(
                                        name: "crafting_special_repairitem",
                                    ),
                                    "crafting_special_shielddecoration": Unit(
                                        name: "crafting_special_shielddecoration",
                                    ),
                                    "crafting_special_shulkerboxcoloring": Unit(
                                        name: "crafting_special_shulkerboxcoloring",
                                    ),
                                    "crafting_special_tippedarrow": Unit(
                                        name: "crafting_special_tippedarrow",
                                    ),
                                    "smelting": Struct(
                                        name: "smelting",
                                        fields: {
                                            "group": String(128),
                                            "ingredients": Array(
                                                length: Prefixed(VarInt),
                                                type: Shared("slot"),
                                            ),
                                            "result": Shared("slot"),
                                            "experience": F32,
                                            "cooking_time": VarInt,
                                        },
                                    ),
                                },
                            ),
                        },
                    ),
                ),
            },
        ),
        (Client, Play, 92): Struct(
            name: "tags",
            fields: {
                "block_tags": Shared("tag"),
                "item_tags": Shared("tag"),
                "fluid_tags": Shared("tag"),
                "entity_tags": Shared("tag"),
            },
        ),
        (Server, Handshaking, 0): Struct(
            name: "handshake",
            fields: {
                "protocol_version": VarInt,
                "server_address": String(255),
                "server_port": U16,
                "next_state": Enum(
                    name: "state",
                    variant: Prefixed(VarInt),
                    variants: {
                        1: Unit(
                            name: "status",
                        ),
                        2: Unit(
                            name: "login",
                        ),
                    },
                ),
            },
        ),
        (Server, Status, 0): Struct(
            name: "request",
            fields: {},
        ),
        (Server, Status, 1): Struct(
            name: "ping",
            fields: {
                "payload": I64,
            },
        ),
        (Server, Login, 0): Struct(
            name: "login_start",
            fields: {
                "name": String(16),
            },
        ),
        (Server, Login, 1): Struct(
            name: "encryption_response",
            fields: {
                "shared_secret": Array(
                    length: Prefixed(VarInt),
                    type: U8,
                ),
                "verify_token": Array(
                    length: Prefixed(VarInt),
                    type: U8,
                ),
            },
        ),
        (Server, Login, 2): Struct(
            name: "login_plugin_response",
            fields: {
                "message_id": VarInt,
                "successful": Boolean,
                "data": Option(Array(
                    length: RemainingLength,
                    type: U8,
                )),
            },
        ),
        (Server, Play, 0): Struct(
            name: "teleport_confirm",
            fields: {
                "teleport_id": VarInt,
            },
        ),
        (Server, Play, 1): Struct(
            name: "query_block_nbt",
            fields: {
                "transaction_id": VarInt,
                "location": Shared("position"),
            },
        ),
        (Server, Play, 2): Struct(
            name: "set_difficulty",
            fields: {
                "new_difficulty": Enum(
                    name: "difficulty",
                    variant: Prefixed(I8),
                    variants: {
                        0: Unit(
                            name: "peaceful",
                        ),
                        1: Unit(
                            name: "easy",
                        ),
                        2: Unit(
                            name: "normal",
                        ),
                        3: Unit(
                            name: "hard",
                        ),
                    },
                ),
            },
        ),
        (Server, Play, 3): Struct(
            name: "chat_message",
            fields: {
                "message": String(256),
            },
        ),
        (Server, Play, 4): Struct(
            name: "client_status",
            fields: {
                "action": Enum(
                    name: "action",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "perform_respawn",
                        ),
                        1: Unit(
                            name: "request_stats",
                        ),
                    },
                ),
            },
        ),
        (Server, Play, 5): Struct(
            name: "client_settings",
            fields: {
                "local": String(16),
                "view_distance": I8,
                "chat_mode": VarInt,
                "chat_colors": Boolean,
                "displayed_skin_parts": BitFlags(
                    name: "displayed_skin_parts",
                    type: U8,
                    flags: {
                        1: "cape_enabled",
                        2: "jacket_enabled",
                        4: "left_sleeve_enabled",
                        8: "right_sleeve_enabled",
                        16: "left_pants_enabled",
                        32: "right_pants_enabled",
                        64: "hat_enabled",
                    },
                ),
                "main_hand": Enum(
                    name: "main_hand",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "left",
                        ),
                        1: Unit(
                            name: "right",
                        ),
                    },
                ),
            },
        ),
        (Server, Play, 6): Struct(
            name: "tab_complete",
            fields: {
                "transaction_id": VarInt,
                "text": String(32500),
            },
        ),
        (Server, Play, 7): Struct(
            name: "window_confirmation",
            fields: {
                "window_id": I8,
                "action_number": I16,
                "accepted": Boolean,
            },
        ),
        (Server, Play, 8): Struct(
            name: "click_window_button",
            fields: {
                "window_id": I8,
                "button": I8,
            },
        ),
        (Server, Play, 9): Struct(
            name: "click_window",
            fields: {
                "window_id": U8,
                "slot": I16,
                "button": I8,
                "action_number": I16,
                "mode": VarInt,
                "clicked_item": Shared("slot"),
            },
        ),
        (Server, Play, 10): Struct(
            name: "close_window",
            fields: {
                "window_id": U8,
            },
        ),
        (Server, Play, 11): Struct(
            name: "plugin_message",
            fields: {
                "channel": Shared("identifier"),
                "data": Array(
                    length: RemainingLength,
                    type: U8,
                ),
            },
        ),
        (Server, Play, 12): Struct(
            name: "edit_book",
            fields: {
                "new_book": Shared("slot"),
                "is_signed": Boolean,
                "hand": Shared("hand"),
            },
        ),
        (Server, Play, 13): Struct(
            name: "entity_nbt_request",
            fields: {
                "transaction_id": VarInt,
                "entity_id": Shared("entity_id"),
            },
        ),
        (Server, Play, 14): Struct(
            name: "interact_entity",
            fields: {
                "entity_id": Shared("entity_id"),
                "type": Enum(
                    name: "type",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Struct(
                            name: "interact",
                            fields: {
                                "hand": Shared("hand"),
                            },
                        ),
                        1: Unit(
                            name: "attack",
                        ),
                        2: Struct(
                            name: "interact_at",
                            fields: {
                                "target_x": F32,
                                "target_y": F32,
                                "target_z": F32,
                                "hand": Shared("hand"),
                            },
                        ),
                    },
                ),
            },
        ),
        (Server, Play, 15): Struct(
            name: "keep_alive",
            fields: {
                "keep_alive_id": I64,
            },
        ),
        (Server, Play, 16): Struct(
            name: "lock_difficulty",
            fields: {
                "locked": Boolean,
            },
        ),
        (Server, Play, 17): Struct(
            name: "player_position",
            fields: {
                "x": F64,
                "feet_y": F64,
                "z": F64,
                "on_ground": Boolean,
            },
        ),
        (Server, Play, 18): Struct(
            name: "player_position_and_rotation",
            fields: {
                "x": F64,
                "feet_y": F64,
                "z": F64,
                "yaw": F32,
                "pitch": F32,
                "on_ground": Boolean,
            },
        ),
        (Server, Play, 19): Struct(
            name: "player_rotation",
            fields: {
                "yaw": F32,
                "pitch": F32,
                "on_ground": Boolean,
            },
        ),
        (Server, Play, 20): Struct(
            name: "player_movement",
            fields: {
                "on_ground": Boolean,
            },
        ),
        (Server, Play, 21): Struct(
            name: "vehicle_move",
            fields: {
                "x": F64,
                "y": F64,
                "z": F64,
                "yaw": F32,
                "pitch": F32,
            },
        ),
        (Server, Play, 22): Struct(
            name: "steer_boat",
            fields: {
                "left_paddle_turning": Boolean,
                "right_paddle_turning": Boolean,
            },
        ),
        (Server, Play, 23): Struct(
            name: "pick_item",
            fields: {
                "slot_to_use": VarInt,
            },
        ),
        (Server, Play, 24): Struct(
            name: "craft_recipe_request",
            fields: {
                "window_id": I8,
                "recipe": Shared("identifier"),
                "make_all": Boolean,
            },
        ),
        (Server, Play, 25): Struct(
            name: "player_abilities",
            fields: {
                "flags": BitFlags(
                    name: "flags",
                    type: I8,
                    flags: {
                        1: "is_creative",
                        2: "is_flying",
                        4: "can_fly",
                        8: "damage_disabled",
                    },
                ),
                "flying_speed": F32,
                "walking_speed": F32,
            },
        ),
        (Server, Play, 26): Struct(
            name: "player_digging",
            fields: {
                "status": Enum(
                    name: "status",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "started_digging",
                        ),
                        1: Unit(
                            name: "cancelled_digging",
                        ),
                        2: Unit(
                            name: "finished_digging",
                        ),
                        3: Unit(
                            name: "drop_item_stack",
                        ),
                        4: Unit(
                            name: "drop_item",
                        ),
                        5: Unit(
                            name: "shoot_arrow_finish_eating",
                        ),
                        6: Unit(
                            name: "swap_item_in_hand",
                        ),
                    },
                ),
                "location": Shared("position"),
                "face": Enum(
                    name: "face",
                    variant: Prefixed(I8),
                    variants: {
                        0: Unit(
                            name: "bottom",
                        ),
                        1: Unit(
                            name: "top",
                        ),
                        2: Unit(
                            name: "north",
                        ),
                        3: Unit(
                            name: "south",
                        ),
                        4: Unit(
                            name: "west",
                        ),
                        5: Unit(
                            name: "east",
                        ),
                    },
                ),
            },
        ),
        (Server, Play, 27): Struct(
            name: "entity_action",
            fields: {
                "entity_id": Shared("entity_id"),
                "action_id": Enum(
                    name: "action",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "start_sneaking",
                        ),
                        1: Unit(
                            name: "stop_sneaking",
                        ),
                        2: Unit(
                            name: "leave_bed",
                        ),
                        3: Unit(
                            name: "start_sprinting",
                        ),
                        4: Unit(
                            name: "stop_sprinting",
                        ),
                        5: Unit(
                            name: "start_jump_with_horse",
                        ),
                        6: Unit(
                            name: "stop_jump_with_horse",
                        ),
                        7: Unit(
                            name: "open_horse_inventory",
                        ),
                        8: Unit(
                            name: "start_flying_with_elytra",
                        ),
                    },
                ),
                "jump_boost": VarInt,
            },
        ),
        (Server, Play, 28): Struct(
            name: "steer_vehicle",
            fields: {
                "sideways": F32,
                "forward": F32,
                "flags": BitFlags(
                    name: "flags",
                    type: U8,
                    flags: {
                        1: "jump",
                        2: "unmount",
                    },
                ),
            },
        ),
        (Server, Play, 29): Struct(
            name: "recipe_book_data",
            fields: {
                "type": Enum(
                    name: "type",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Struct(
                            name: "display_name",
                            fields: {
                                "recipe_id": Shared("identifier"),
                            },
                        ),
                        1: Struct(
                            name: "recipe_book_states",
                            fields: {
                                "crafting_recipe_book_open": Boolean,
                                "crafting_recipe_filter_active": Boolean,
                                "smelting_recipe_book_open": Boolean,
                                "smelting_recipe_filter_active ": Boolean,
                            },
                        ),
                    },
                ),
                "blasting_recipe_book_open": Boolean,
                "blasting_recipe_filter_active": Boolean,
                "smoking_recipe_book_open ": Boolean,
                "smoking_recipe_filter_active ": Boolean,
            },
        ),
        (Server, Play, 30): Struct(
            name: "name_item",
            fields: {
                "item_name": String(32767),
            },
        ),
        (Server, Play, 31): Enum(
            name: "resource_pack_status",
            variant: Prefixed(VarInt),
            variants: {
                0: Unit(
                    name: "successfully_loaded",
                ),
                1: Unit(
                    name: "declined",
                ),
                2: Unit(
                    name: "failed_download",
                ),
                3: Unit(
                    name: "accepted",
                ),
            },
        ),
        (Server, Play, 32): Struct(
            name: "advancement_tab",
            fields: {
                "action": Enum(
                    name: "action",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Struct(
                            name: "opened_tab",
                            fields: {
                                "tab_id": Shared("identifier"),
                            },
                        ),
                        1: Unit(
                            name: "closen_screen",
                        ),
                    },
                ),
            },
        ),
        (Server, Play, 33): Struct(
            name: "select_trade",
            fields: {
                "selected_slot": VarInt,
            },
        ),
        (Server, Play, 34): Struct(
            name: "set_beacon_effect",
            fields: {
                "primary_effect": VarInt,
                "secondary_effect": VarInt,
            },
        ),
        (Server, Play, 35): Struct(
            name: "held_item_change",
            fields: {
                "slot": I16,
            },
        ),
        (Server, Play, 36): Struct(
            name: "update_command_block",
            fields: {
                "location": Shared("position"),
                "command": String(32767),
                "mode": Enum(
                    name: "mode",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "sequence",
                        ),
                        1: Unit(
                            name: "auto",
                        ),
                        2: Unit(
                            name: "redstone",
                        ),
                    },
                ),
                "flags": BitFlags(
                    name: "flags",
                    type: I8,
                    flags: {
                        1: "track_output",
                        2: "is_conditional",
                        4: "automatic",
                    },
                ),
            },
        ),
        (Server, Play, 37): Struct(
            name: "update_command_block_minecraft",
            fields: {
                "entity_id": Shared("entity_id"),
                "command": String(0),
                "tract_output": Boolean,
            },
        ),
        (Server, Play, 38): Struct(
            name: "creative_inventory_action",
            fields: {
                "slot": I16,
                "clicked_item": Shared("slot"),
            },
        ),
        (Server, Play, 39): Struct(
            name: "update_jigsaw_block",
            fields: {
                "location": Shared("position"),
                "attachment_type": Shared("identifier"),
                "target_pool": Shared("identifier"),
                "final_state": String(0),
            },
        ),
        (Server, Play, 40): Struct(
            name: "update_structure_block",
            fields: {
                "location": Shared("postion"),
                "action": Enum(
                    name: "action",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "update_data",
                        ),
                        1: Unit(
                            name: "save_structure",
                        ),
                        2: Unit(
                            name: "load_the_structure",
                        ),
                        3: Unit(
                            name: "detect_size",
                        ),
                    },
                ),
                "mode": Enum(
                    name: "mode",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "save",
                        ),
                        1: Unit(
                            name: "load",
                        ),
                        2: Unit(
                            name: "corner",
                        ),
                        3: Unit(
                            name: "data",
                        ),
                    },
                ),
                "name": String(0),
                "offset_x": U8,
                "offset_y": U8,
                "offset_z": U8,
                "size_x": U8,
                "size_y": U8,
                "size_z": U8,
                "mirror": Enum(
                    name: "mirror",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "none",
                        ),
                        1: Unit(
                            name: "left_right",
                        ),
                        2: Unit(
                            name: "front_back",
                        ),
                    },
                ),
                "rotation": Enum(
                    name: "rotation",
                    variant: Prefixed(VarInt),
                    variants: {
                        0: Unit(
                            name: "none",
                        ),
                        1: Unit(
                            name: "clockwise_90",
                        ),
                        2: Unit(
                            name: "clockwise_180",
                        ),
                        3: Unit(
                            name: "counter_clockwise_90",
                        ),
                    },
                ),
                "metadata": String(0),
                "integrity": F32,
                "seed": VarLong,
                "flags": BitFlags(
                    name: "flags",
                    type: U8,
                    flags: {
                        1: "ignore_entities",
                        2: "show_air",
                        4: "show_bounding_box",
                    },
                ),
            },
        ),
        (Server, Play, 41): Struct(
            name: "update_sign",
            fields: {
                "location": Shared("position"),
                "line_1": String(384),
                "line_2": String(384),
                "line_3": String(384),
                "line_4": String(384),
            },
        ),
        (Server, Play, 42): Struct(
            name: "animation",
            fields: {
                "hand": Shared("hand"),
            },
        ),
        (Server, Play, 43): Struct(
            name: "spectate",
            fields: {
                "target_player": Uuid,
            },
        ),
        (Server, Play, 44): Struct(
            name: "player_block_placement",
            fields: {
                "hand": Shared("hand"),
                "location": Shared("position"),
                "face": Shared("face"),
                "cursor_position_x": F32,
                "cursor_position_y": F32,
                "cursor_position_z": F32,
                "inside_block": Boolean,
            },
        ),
        (Server, Play, 45): Struct(
            name: "use_item",
            fields: {
                "hand": Shared("hand"),
            },
        ),
    },
    shared_types: [
        Enum(
            name: "dimension",
            variant: Prefixed(I32),
            variants: {
                -1: Unit(
                    name: "nether",
                ),
                0: Unit(
                    name: "overworld",
                ),
                1: Unit(
                    name: "end",
                ),
            },
        ),
        Enum(
            name: "face",
            variant: Prefixed(VarInt),
            variants: {
                0: Unit(
                    name: "bottom",
                ),
                1: Unit(
                    name: "top",
                ),
                2: Unit(
                    name: "north",
                ),
                3: Unit(
                    name: "south",
                ),
                4: Unit(
                    name: "west",
                ),
                5: Unit(
                    name: "east",
                ),
            },
        ),
        Enum(
            name: "feet_eyes",
            variant: Prefixed(VarInt),
            variants: {
                0: Unit(
                    name: "feet",
                ),
                1: Unit(
                    name: "eyes",
                ),
            },
        ),
        Enum(
            name: "gamemode",
            variant: Prefixed(U8),
            variants: {
                0: Unit(
                    name: "survival",
                ),
                1: Unit(
                    name: "creative",
                ),
                2: Unit(
                    name: "spectator",
                ),
                8: Unit(
                    name: "survival_hardcore",
                ),
                9: Unit(
                    name: "creative_hardcore",
                ),
                10: Unit(
                    name: "adventure_hardcore",
                ),
                11: Unit(
                    name: "spectator_hardcore",
                ),
            },
        ),
        Enum(
            name: "hand",
            variant: Prefixed(VarInt),
            variants: {
                0: Unit(
                    name: "main_hand",
                ),
                1: Unit(
                    name: "off_hand",
                ),
            },
        ),
        BitField(
            name: "position",
            fields: {
                "x": I32(26),
                "z": I32(26),
                "y": I16(12),
            },
        ),
        Enum(
            name: "slot",
            variant: Prefixed(Boolean),
            variants: {
                false: Unit(
                    name: "empty",
                ),
                true: Struct(
                    name: "item",
                    fields: {
                        "id": VarInt,
                        "count": VarInt,
                        "nbt": Nbt,
                    },
                ),
            },
        ),
    ],
)